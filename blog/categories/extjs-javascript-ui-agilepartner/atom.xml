<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ExtJS Javascript UI AgilePartner | ZePaG's blog, As if you cared...]]></title>
  <link href="http://zepag.github.io/blog/categories/extjs-javascript-ui-agilepartner/atom.xml" rel="self"/>
  <link href="http://zepag.github.io/"/>
  <updated>2014-05-11T15:39:33+02:00</updated>
  <id>http://zepag.github.io/</id>
  <author>
    <name><![CDATA[Pierre-Antoine GrÃ©goire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ExtJS: Structuring Your Javascript Code (1)]]></title>
    <link href="http://zepag.github.io/blog/2009/12/30/extjs-structuring-your-javascript-code/"/>
    <updated>2009-12-30T00:00:00+01:00</updated>
    <id>http://zepag.github.io/blog/2009/12/30/extjs-structuring-your-javascript-code</id>
    <content type="html"><![CDATA[<div class='post'>
<h1>ExtJS and me ;) </h1>In my search for good client application widgets, a few years ago, I started to look at YahooUI.<br />In these days ("days of yore" would be a tad inappropriate ;) ), YahooUI had some limitations, and only a few "out-of-the-box" widgets for "enterprise" applications.<br /><br />The following is an approximated history of ExtJS, don't take it for granted... :p<br /><br />At some point, Jack Slocum forked or bundled, or rewrote a whole lot of YahooUI, known in these days as YahooUI-ext (extension).<br />This is when I learned about it, thanks to my soon-to-be boss (javascript hacker in his spare time ;)).<br />Though as the project evolved, and the codebase got almost completely rewritten, the project began to include YahooUI as one of its core mechanims (and therefore YahooUI-Ext was not only an extension to YahooUI anymore), which was the major shift that made the renamed ExtJS a framework in its own right. From now on, YahooUI dependency could be completely removed, and other frameworks could be used as an core mechanism (JQuery, Prototype...).<br /><br />At some point (version 2.0 and on) a specifically rewritten and optimized extjs mechanism was made available: ext-base. From there on, other frameworks were not even necessary anymore.<br /><br /><h1>Javascript thingy... why OMG why???</h1><br />In a few previous posts, I've already tried to debunk the javascript monster, in order to show that Javascript is a very good language, and that the monster in the browser is not javascript itself (though as every language, it's far from perfect), but the DOM one has to deal with (which differs from browser to browser).<br /><br />As a web era guy, I've always felt deeply uncomfortable coding web interfaces with server-side languages (even if they are for rich-client-like applications). It has always made me feel like playing volley-ball knee-deep in liquid honey... (ok this is a weird image, though it conveys the message I guess).<br /><br />In fact, HTTP is a disconnected protocol, and I've always felt like one should use the best tool on both sides.<br />Before a few years ago and the dawning of AJAX, the client side was in a "ask-for-page, display-page, submit-form" paradigm which made server-side handling of web sites still relevant.<br />With AJAX and modern frameworks like ExtJS, it is possible to build your client application with a notepad in an html file, and then provide a backend based on any technology you see fit: JavaEE, .Net, PHP, CGI...<br />Moreover, if you need to change the UI or refresh it a bit later on, you will have the opportunity to do it without touching the logic-handling backend.<br /><br />I know for a fact that this ranting is directly (in my case) directed towards frameworks like JSF or GWT (the later being a specific case, as all it does is allowing you to code javascript + HTML + CSS in Java, and also because I think it's a damn good framework).<br /><br />There are 2 tasks one has to handle with a javascript based framework like ExtJS (in fact 3, because the first is to know a bit more than average about Javascript) in order to achieve productivity:<br /><ol><li>Use an appropriate tooling: Javascript is not compiled, a validation tool is then required (and code completion is a nice-to-have)</li><li>Try to structure your code properly: This is (sadly) not very much documented.</li></ol><br />I'll try to detail the second point in this post. For the first one, I'd recommend the use of Aptana, TextMate, or Spket in Eclipse. Visual Studio seems to have some Intellisense features for ExtJS. Learn more <a href="http://www.extjs.com/learn/Manual:Resources#IDEs">here</a>.<br /><br /><h1>The need to structure</h1>When you download ExtJS, you receive a whole lot of good stuff. Among these a lot of examples...<br /><br />What is hard to do is to try and begin an application.<br />Very quickly, you'll end up creating a grid, and asking yourself: "My Ajax server-side request seems to be called and returns JSON/XML, then why is it that my grid doesn't show the records?".<br />You'll soon see that extending the default <b>stores</b> and <b>readers</b> will allow you to whether use browsers' consoles (when they have one) or message boxes in order to give feedback on potential errors.<br />By default, the framework's widgets are quite silent about this. <br /><br />Though all the hooks are in place, allowing you to add the expected behaviour (e.g. a popup when server-side errors occur, or even a retry policy, or displaying a loading icon...).<br /><br />In order to achieve and more importantly maintain that, a bit of structure is necessary.<br />This is what I'll try and demonstrate in my next blog post.</div>

]]></content>
  </entry>
  
</feed>
